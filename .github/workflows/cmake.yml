name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  OPENCV_VERSION: 4.5.0

jobs:   
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
      with:
            submodules: 'recursive'
    
    - name: CMake debug info
      run: |
            cmake --version
            
    - name: Install ccache
      uses: hendrikmuhs/ccache-action@v1
      
    - name: Install GTest
      run: sudo apt-get install libgtest-dev
            
#    - name: Added ccache support for NVCC compiler invocation
#      run: |
#            sudo sed -i '/^set(CUDA_NVCC_EXECUTABLE.*/i set(CMAKE_CUDA_COMPILER_LAUNCHER "@CMAKE_CUDA_COMPILER_LAUNCHER@") # path' /usr/local/share/cmake-3.22/Modules/FindCUDA/run_nvcc.cmake
#            sudo sed -i ':a;N;$!ba;s/COMMAND "${CUDA_NVCC_EXECUTABLE}"\n  "${source_file}"/COMMAND ${CMAKE_CUDA_COMPILER_LAUNCHER}\n  "${CUDA_NVCC_EXECUTABLE}"\n  "${source_file}"/g' /usr/local/share/cmake-3.22/Modules/FindCUDA/run_nvcc.cmake
#            cat /usr/local/share/cmake-3.22/Modules/FindCUDA/run_nvcc.cmake
            
    - name: Install cuda-toolkit 
      uses: Jimver/cuda-toolkit@v0.2.5
      with:
            cuda: '10.2.89'
      
    - name: Pull opencv
      run:  |
            mkdir -p thirdparty/opencv
            wget https://github.com/opencv/opencv/archive/refs/tags/${{env.OPENCV_VERSION}}.tar.gz -q -O thirdparty/opencv.tar.gz
            wget https://github.com/opencv/opencv_contrib/archive/refs/tags/${{env.OPENCV_VERSION}}.tar.gz -q -O thirdparty/opencv_contrib.tar.gz
            
    - name: Extract opencv
      working-directory: ./thirdparty
      run:  |
            tar -xf opencv.tar.gz
            tar -xf opencv_contrib.tar.gz
            ls -l
            
    - name: Create opencv build folder
      working-directory: ./thirdparty
      run: mkdir -p ./opencv-4.5.0/.build
      
    - name: Remove ccache-violating nvcc flags from OpenCV
      working-directory: ./thirdparty/opencv-${{env.OPENCV_VERSION}}
      run: |
            sed -i 's/set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -Xcompiler -DCVAPI_EXPORTS)//g' cmake/OpenCVDetectCUDA.cmake
            cat cmake/OpenCVDetectCUDA.cmake
            
    - name: Build opencv
      working-directory: ./thirdparty/opencv-${{env.OPENCV_VERSION}}/.build
      run:  >
            cmake ../
            -DWITH_CUDA=ON
            -DBUILD_SHARED_LIBS=NO
            -DCMAKE_C_COMPILER_LAUNCHER=ccache
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
            -DCMAKE_CUDA_COMPILER_LAUNCHER=ccache
            -DOPENCV_EXTRA_MODULES_PATH=${{github.workspace}}/thirdparty/opencv_contrib-${{env.OPENCV_VERSION}}/modules
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/thirdparty/opencv-${{env.OPENCV_VERSION}}/.install
            -DBUILD_LIST="core,imgproc,calib3d,highgui,features2d,flann,cudev,cudafeatures2d"
            && make install -j2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
           cmake
           -B ${{github.workspace}}/build
           -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
           -DBUILD_SHARED_LIBS=OFF
           -DCMAKE_C_COMPILER_LAUNCHER=ccache
           -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
           -DCMAKE_CUDA_COMPILER_LAUNCHER=ccache
           -DOpenCV_DIR=${{github.workspace}}/thirdparty/opencv-${{env.OPENCV_VERSION}}/.install/lib/cmake/opencv4
           -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install
           

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
