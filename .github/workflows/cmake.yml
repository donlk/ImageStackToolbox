name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  wget:
    runs-on: ubuntu-latest
    steps:
    - name: wget
      uses: wei/wget@v1
      with:
        args: -O sample.html https://httpbin.org/html
        
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: cuda-toolkit 
      uses: Jimver/cuda-toolkit@v0.2.5
      
    - name: pull-opencv
      run:  |
            mkdir -p thirdparty/opencv
            wget https://github.com/opencv/opencv/archive/refs/tags/4.5.5.tar.gz -O thirdparty/opencv.tar.bz2
            wget https://github.com/opencv/opencv_contrib/archive/refs/tags/4.5.5.tar.gz -O thirdparty/opencv_contrib.tar.bz2
            
    - name: extract-opencv
      working-directory: ./thirdparty
      run:  |
            ls -l
            tar -xvf opencv.tar.bz2
            tar -xvf opencv_contrib.tar.bz2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
