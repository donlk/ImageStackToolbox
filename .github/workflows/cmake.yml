name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:   
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
            submodules: 'recursive'
            
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
            
    - name: pull-ccache
      run:  |
            mkdir -p thirdparty/ccache
            wget https://github.com/ccache/ccache/releases/download/v4.5.1/ccache-4.5.1.tar.gz -q -O thirdparty/ccache.tar.gz
    
    - name: extract-ccache
      working-directory: ./thirdparty
      run:  tar -xf ccache.tar.gz
      
    - name: create-ccache-build-folder
      working-directory: ./thirdparty
      run: mkdir -p ./ccache-4.5.1/.build
      
    - name: build-ccache
      working-directory: ./thirdparty/ccache-4.5.1/.build
      run:  >
            export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH" 
            cmake ../
            -DCMAKE_CUDA_COMPILER_LAUNCHER=ccache
            -DWITH_CUDA=ON
            -DZSTD_FROM_INTERNET=ON
            -DHIREDIS_FROM_INTERNET=ON
            -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/thirdparty/ccache-4.5.1/.install
            && make install -j2
            && ls -l ${{github.workspace}}/thirdparty/ccache-4.5.1/.install/bin
            
    - name: cmake-cat
      run: cat /usr/share/cmake-3.22.1/Modules/FindCUDA/run_nvcc.cmake
            
    - name: cuda-toolkit 
      uses: Jimver/cuda-toolkit@v0.2.5
      
    - name: cmake-version
      run: cmake --version
      
    - name: ccache-version
      run: ccache --version
      
    - name: pull-opencv
      run:  |
            mkdir -p thirdparty/opencv
            wget https://github.com/opencv/opencv/archive/refs/tags/4.5.5.tar.gz -q -O thirdparty/opencv.tar.gz
            wget https://github.com/opencv/opencv_contrib/archive/refs/tags/4.5.5.tar.gz -q -O thirdparty/opencv_contrib.tar.gz
            
    - name: extract-opencv
      working-directory: ./thirdparty
      run:  |
            tar -xf opencv.tar.gz
            tar -xf opencv_contrib.tar.gz
            ls -l
            
    - name: create-opencv-build-folder
      working-directory: ./thirdparty
      run: mkdir -p ./opencv-4.5.5/.build
            
    - name: build-opencv
      working-directory: ./thirdparty/opencv-4.5.5/.build
      run:  >
            export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
            && cmake ../
            -DWITH_CUDA=ON
            -DCMAKE_CUDA_COMPILER_LAUNCHER=ccache
            -DOPENCV_EXTRA_MODULES_PATH=${{github.workspace}}/thirdparty/opencv_contrib-4.5.5/modules
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/thirdparty/opencv-4.5.5/.install
            -DBUILD_LIST="core,imgproc,calib3d,highgui,features2d,flann,cudev,cudafeatures2d"
            && make install -j2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
           export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
           && cmake
           -B ${{github.workspace}}/build
           -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
           -DBUILD_SHARED_LIBS=OFF
           -DCMAKE_CUDA_COMPILER_LAUNCHER=ccache
           -DOpenCV_DIR=${{github.workspace}}/thirdparty/opencv-4.5.5/.install/lib/cmake/opencv4

    - name: Build
      # Build your program with the given configuration
      run: >
            export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
            && cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
